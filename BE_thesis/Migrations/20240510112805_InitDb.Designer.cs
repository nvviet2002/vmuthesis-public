// <auto-generated />
using System;
using BE_thesis.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BE_thesis.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240510112805_InitDb")]
    partial class InitDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BE_thesis.Model.Brand", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("origin");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("ID");

                    b.ToTable("Brand");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Address = "98 Bà Triệu, Phường Hàng Bài, Quận Hoàn Kiếm",
                            CreatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2363),
                            IsDeleted = false,
                            Name = "Phúc Long",
                            Origin = "Việt Nam",
                            UpdatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2365)
                        },
                        new
                        {
                            ID = 2,
                            Address = " Unilever House, 100 Victoria Embankment, London EC4Y 0DY, United Kingdom",
                            CreatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2369),
                            IsDeleted = false,
                            Name = "Unilever",
                            Origin = "Mỹ",
                            UpdatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2369)
                        },
                        new
                        {
                            ID = 3,
                            Address = "700 Anderson Hill Road, Purchase, NY 10577, Hoa Kỳ",
                            CreatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2372),
                            IsDeleted = false,
                            Name = "PepsiCo",
                            Origin = "Mỹ",
                            UpdatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2372)
                        },
                        new
                        {
                            ID = 4,
                            Address = "One Coca-Cola Plaza, Atlanta, Georgia 30313, Hoa Kỳ",
                            CreatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2374),
                            IsDeleted = false,
                            Name = "Coca-Cola",
                            Origin = "Mỹ",
                            UpdatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2375)
                        },
                        new
                        {
                            ID = 5,
                            Address = " Tầng 8, Tòa nhà Central Plaza, 17 Lê Duẩn, Phường Bến Nghé, Quận 1, TP.",
                            CreatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2377),
                            IsDeleted = false,
                            Name = "Masan",
                            Origin = "Việt Nam",
                            UpdatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2377)
                        },
                        new
                        {
                            ID = 6,
                            Address = " 199-205 Nguyễn Thái Học, Phường Phạm Ngũ Lão, Quận 1, TP.",
                            CreatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2379),
                            IsDeleted = false,
                            Name = "Co.op",
                            Origin = "Việt Nam",
                            UpdatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2379)
                        },
                        new
                        {
                            ID = 7,
                            Address = "1231 QL 1A, KP5, Bình Trị Đông B, Quận Bình Tân, TP. Hồ Chí Minh",
                            CreatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2381),
                            IsDeleted = false,
                            Name = "Big C",
                            Origin = "Mỹ",
                            UpdatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2382)
                        },
                        new
                        {
                            ID = 8,
                            Address = " 166 Nguyễn Thái Học, Phường Quang Trung, TP. Vinh, Nghệ An",
                            CreatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2384),
                            IsDeleted = false,
                            Name = "TH True Milk",
                            Origin = "Việt Nam",
                            UpdatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2385)
                        },
                        new
                        {
                            ID = 9,
                            Address = "Lô C24 - 24B/II, C25/II - Đường 2F - KCN Vĩnh Lộc - Xã Vĩnh Lộc A - Huyện Bình Chánh - TP. Hồ Chí Minh",
                            CreatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2387),
                            IsDeleted = false,
                            Name = "Saigon Food",
                            Origin = "Việt nam",
                            UpdatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2387)
                        },
                        new
                        {
                            ID = 10,
                            Address = "Tầng 12, Tòa nhà Richy Tower, Số 35 Mạc Thái Tổ, Phường Yên Hòa, Quận Cầu Giấy, Hà Nội",
                            CreatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2389),
                            IsDeleted = false,
                            Name = "Sunhouse",
                            Origin = "Việt Nam",
                            UpdatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2390)
                        });
                });

            modelBuilder.Entity("BE_thesis.Model.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("ID");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2698),
                            Description = "Trà là một loại thức uống được pha từ lá của cây trà (Camellia sinensis). Cây trà có nguồn gốc từ Đông Á, và được trồng ở nhiều nơi trên thế giới. Trà được biết đến với hương vị thơm ngon, đa dạng và những lợi ích cho sức khỏe.",
                            IsDeleted = false,
                            Name = "Trà",
                            UpdatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2699)
                        },
                        new
                        {
                            ID = 2,
                            CreatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2701),
                            Description = "Thực phẩm là những thứ mà con người và động vật ăn để cung cấp năng lượng và chất dinh dưỡng cho cơ thể. Thực phẩm đóng vai trò quan trọng trong cuộc sống, là nền tảng cho sự phát triển và duy trì sức khỏe của con người.",
                            IsDeleted = false,
                            Name = "Thực phẩm",
                            UpdatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2702)
                        },
                        new
                        {
                            ID = 3,
                            CreatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2704),
                            Description = "Đồ ăn vặt là những món ăn nhẹ được thưởng thức giữa các bữa ăn chính. Đồ ăn vặt có thể là những món ăn đơn giản, dễ làm như trái cây, bánh quy, hoặc là những món ăn cầu kỳ hơn như bánh ngọt, kem,...",
                            IsDeleted = false,
                            Name = "Đồ ăn vặt",
                            UpdatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2704)
                        },
                        new
                        {
                            ID = 4,
                            CreatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2706),
                            Description = "Đồ uống là những chất lỏng được con người và động vật sử dụng để cung cấp nước cho cơ thể. Nước là loại đồ uống quan trọng nhất, là thành phần chính của cơ thể và đóng vai trò quan trọng trong mọi hoạt động sống",
                            IsDeleted = false,
                            Name = "Đồ uống",
                            UpdatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2707)
                        },
                        new
                        {
                            ID = 5,
                            CreatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2708),
                            Description = "Hạt là một phần quan trọng của thực vật, đóng vai trò như một đơn vị sinh sản. Hạt được hình thành từ noãn sau khi được thụ phấn. Hạt có kích thước và hình dạng khác nhau, tùy thuộc vào loại thực vật.",
                            IsDeleted = false,
                            Name = "Hạt",
                            UpdatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2709)
                        },
                        new
                        {
                            ID = 6,
                            CreatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2710),
                            Description = "Trái cây là phần thịt quả của thực vật có vị ngọt và thường được ăn sống. Trái cây là nguồn cung cấp vitamin, khoáng chất và chất xơ thiết yếu cho cơ thể.",
                            IsDeleted = false,
                            Name = "Trái cây",
                            UpdatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2711)
                        },
                        new
                        {
                            ID = 7,
                            CreatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2712),
                            Description = "Đồ hộp là thực phẩm được bảo quản trong hộp kim loại hoặc thủy tinh kín, giúp giữ nguyên hương vị và chất dinh dưỡng trong thời gian dài.",
                            IsDeleted = false,
                            Name = "Đồ hộp",
                            UpdatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2713)
                        },
                        new
                        {
                            ID = 8,
                            CreatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2715),
                            Description = "Nước chấm là một loại hỗn hợp gia vị được sử dụng để chấm các món ăn. Nước chấm có thể được làm từ nhiều nguyên liệu khác nhau như nước mắm, chanh, ớt, tỏi, đường,... Nước chấm đóng vai trò quan trọng trong ẩm thực Việt Nam, giúp tăng hương vị cho món ăn và tạo sự cân bằng trong bữa ăn.",
                            IsDeleted = false,
                            Name = "Nước chấm",
                            UpdatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2715)
                        },
                        new
                        {
                            ID = 9,
                            CreatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2717),
                            Description = "Mì là một món ăn được làm từ bột mì, nước và muối. Mì có thể được chế biến thành nhiều món ăn khác nhau, từ món nước đến món xào, món kho,... Mì là món ăn phổ biến ở nhiều quốc gia trên thế giới, trong đó có Việt Nam.",
                            IsDeleted = false,
                            Name = "Mỳ",
                            UpdatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2717)
                        },
                        new
                        {
                            ID = 10,
                            CreatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2719),
                            Description = "Đồ gia dụng là những sản phẩm được sử dụng trong gia đình để phục vụ cho các nhu cầu sinh hoạt hàng ngày như nấu nướng, giặt giũ, dọn dẹp nhà cửa,... Đồ gia dụng giúp cho cuộc sống của con người trở nên tiện nghi và thoải mái hơn.",
                            IsDeleted = false,
                            Name = "Đồ gia dụng",
                            UpdatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2720)
                        });
                });

            modelBuilder.Entity("BE_thesis.Model.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("ID");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("BE_thesis.Model.Invoice", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<double>("Amount")
                        .HasColumnType("float")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int?>("CustomerID")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<double>("Discount")
                        .HasColumnType("float")
                        .HasColumnName("discount");

                    b.Property<string>("Identification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("identification");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("note");

                    b.Property<double>("Paid")
                        .HasColumnType("float")
                        .HasColumnName("paid");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<string>("QRCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("qr_code");

                    b.Property<double>("Refund")
                        .HasColumnType("float")
                        .HasColumnName("refund");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<double>("Total")
                        .HasColumnType("float")
                        .HasColumnName("total");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("UserID");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("BE_thesis.Model.InvoiceDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<double>("Amount")
                        .HasColumnType("float")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int?>("InvoiceID")
                        .HasColumnType("int")
                        .HasColumnName("invoice_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("note");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<int?>("ProducID")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float")
                        .HasColumnName("total");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("ID");

                    b.HasIndex("InvoiceID");

                    b.HasIndex("ProductID");

                    b.ToTable("InvoiceDetail");
                });

            modelBuilder.Entity("BE_thesis.Model.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("active");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("avatar");

                    b.Property<int?>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("brand_id");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("description");

                    b.Property<string>("Identification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("identification");

                    b.Property<double>("Inventory")
                        .HasColumnType("float")
                        .HasColumnName("inventory");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<string>("QRCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("qrcode");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("sku");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("type");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int")
                        .HasColumnName("unit_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("ID");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UnitId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("BE_thesis.Model.Unit", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("ID");

                    b.ToTable("Unit");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2787),
                            Description = "Kilôgam",
                            IsDeleted = false,
                            Name = "kg",
                            UpdatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2788)
                        },
                        new
                        {
                            ID = 2,
                            CreatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2791),
                            Description = "Gam",
                            IsDeleted = false,
                            Name = "g",
                            UpdatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2791)
                        },
                        new
                        {
                            ID = 3,
                            CreatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2792),
                            Description = "Lon",
                            IsDeleted = false,
                            Name = "lon",
                            UpdatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2793)
                        },
                        new
                        {
                            ID = 4,
                            CreatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2794),
                            Description = "Chai",
                            IsDeleted = false,
                            Name = "chai",
                            UpdatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2795)
                        },
                        new
                        {
                            ID = 5,
                            CreatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2796),
                            Description = "Hộp",
                            IsDeleted = false,
                            Name = "hộp",
                            UpdatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2797)
                        },
                        new
                        {
                            ID = 6,
                            CreatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2798),
                            Description = "Cái",
                            IsDeleted = false,
                            Name = "cái",
                            UpdatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2799)
                        },
                        new
                        {
                            ID = 7,
                            CreatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2800),
                            Description = "Gói",
                            IsDeleted = false,
                            Name = "gói",
                            UpdatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2801)
                        },
                        new
                        {
                            ID = 8,
                            CreatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2802),
                            Description = "Lốc",
                            IsDeleted = false,
                            Name = "lốc",
                            UpdatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2803)
                        },
                        new
                        {
                            ID = 9,
                            CreatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2804),
                            Description = "Bộ",
                            IsDeleted = false,
                            Name = "bộ",
                            UpdatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2804)
                        },
                        new
                        {
                            ID = 10,
                            CreatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2806),
                            Description = "Thùng",
                            IsDeleted = false,
                            Name = "thùng ",
                            UpdatedAt = new DateTime(2024, 5, 10, 11, 28, 4, 61, DateTimeKind.Utc).AddTicks(2806)
                        });
                });

            modelBuilder.Entity("BE_thesis.Model.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("active");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("address");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("avatar");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("BE_thesis.Model.Invoice", b =>
                {
                    b.HasOne("BE_thesis.Model.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerID");

                    b.HasOne("BE_thesis.Model.User", "User")
                        .WithMany("Invoices")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BE_thesis.Model.InvoiceDetail", b =>
                {
                    b.HasOne("BE_thesis.Model.Invoice", "Invoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceID");

                    b.HasOne("BE_thesis.Model.Product", "Product")
                        .WithMany("Invoices")
                        .HasForeignKey("ProductID");

                    b.Navigation("Invoice");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BE_thesis.Model.Product", b =>
                {
                    b.HasOne("BE_thesis.Model.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId");

                    b.HasOne("BE_thesis.Model.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.HasOne("BE_thesis.Model.Unit", "Unit")
                        .WithMany("Products")
                        .HasForeignKey("UnitId");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BE_thesis.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BE_thesis.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BE_thesis.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BE_thesis.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BE_thesis.Model.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BE_thesis.Model.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BE_thesis.Model.Customer", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("BE_thesis.Model.Invoice", b =>
                {
                    b.Navigation("InvoiceDetails");
                });

            modelBuilder.Entity("BE_thesis.Model.Product", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("BE_thesis.Model.Unit", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BE_thesis.Model.User", b =>
                {
                    b.Navigation("Invoices");
                });
#pragma warning restore 612, 618
        }
    }
}
